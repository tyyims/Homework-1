---
title: "Homework 1"
subtitle: "Research Methods, Spring 2024"
author: "Taeyoung Yim"
format:
  pdf:
    output-file: "yim-t-hwk1-3"
    output-ext:  "pdf"
    header-includes:
      - \usepackage{float}
      - \floatplacement{table}{H}
---
```{r}
#| include: false

if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, ggplot2, dplyr, lubridate, readr, readxl, hrbrthemes, fixest,
               scales, gganimate, gapminder, gifski, png, tufte, plotly, OECD,
               ggrepel, survey, foreign, devtools, pdftools, kableExtra, modelsummary,
               kableExtra)
```

\newpage
# Enrollment Data
Answer the following based on the enrollment data:
\vspace{.2in}
\noindent 1. How many observations exist in your current dataset?<br>
```{r,  echo = FALSE}
library(readr)
for (y in 2010:2015) {
  ## Basic contract/plan information
  ma.path=paste0("data/input/monthly-ma-and-pdp-enrollment-by-cpsc/CPSC_Contract_Info_",y,"_01.csv")
  contract.info=read_csv(ma.path,
                         skip=1,
                         col_names = c("contractid","planid","org_type","plan_type",
                                       "partd","snp","eghp","org_name","org_marketing_name",
                                       "plan_name","parent_org","contract_date"),
                         col_types = cols(
                           contractid = col_character(),
                           planid = col_double(),
                           org_type = col_character(),
                           plan_type = col_character(),
                           partd = col_character(),
                           snp = col_character(),
                           eghp = col_character(),
                           org_name = col_character(),
                           org_marketing_name = col_character(),
                           plan_name = col_character(),
                           parent_org = col_character(),
                           contract_date = col_character()
                         ))

  contract.info = contract.info %>%
    group_by(contractid, planid) %>%
    mutate(id_count=row_number())
    
  contract.info = contract.info %>%
    filter(id_count==1) %>%
    select(-id_count)
    
    ## Enrollments per plan
  ma.path=paste0("data/input/monthly-ma-and-pdp-enrollment-by-cpsc/CPSC_Enrollment_Info_",y,"_01.csv")
  enroll.info=read_csv(ma.path,
                       skip=1,
                       col_names = c("contractid","planid","ssa","fips","state","county","enrollment"),
                       col_types = cols(
                       contractid = col_character(),
                       planid = col_double(),
                       ssa = col_double(),
                       fips = col_double(),
                       state = col_character(),
                       county = col_character(),
                       enrollment = col_double()
                       ),na="*")
    

  ## Merge contract info with enrollment info
  plan.data = contract.info %>%
    left_join(enroll.info, by=c("contractid", "planid")) %>%
    mutate(year=y)
    
  ## Fill in missing fips codes (by state and county)
  plan.data = plan.data %>%
    group_by(state, county) %>%
    fill(fips)

  ## Fill in missing plan characteristics by contract and plan id
  plan.data = plan.data %>%
    group_by(contractid, planid) %>%
    fill(plan_type, partd, snp, eghp, plan_name)
  
  ## Fill in missing contract characteristics by contractid
  plan.data = plan.data %>%
    group_by(contractid) %>%
    fill(org_type,org_name,org_marketing_name,parent_org)
    
  ## Collapse from monthly data to yearly
  plan.year = plan.data %>%
    group_by(contractid, planid, fips) %>%
    arrange(contractid, planid, fips) %>%
    rename(avg_enrollment=enrollment)
  
  write_rds(plan.year,paste0("data/output/ma_data_",y,".rds"))
}

library(readr)
full.ma.data <- read_rds("data/output/ma_data_2010.rds")
for (y in 2011:2015) {
  full.ma.data <- rbind(full.ma.data,read_rds(paste0("data/output/ma_data_",y,".rds")))
}

write_rds(full.ma.data,"data/output/full_ma_data.rds")
sapply(paste0("ma_data_", 2010:2015, ".rds"), unlink)
num_observations <- nrow(full.ma.data)
cat("Number of observations in the dataset:", num_observations, "\n")
```

\newpage
\noindent 2. How many different *plan_types* exist in the data? <br>
```{r,  echo = FALSE}
num_plan_types <- length(unique(full.ma.data$plan_type))
cat("Number of different plan types:", num_plan_types, "\n")
```

\newpage
\noindent 3. Provide a table of the count of plans under each plan type in each year.<br>
```{r,  echo = FALSE}
library(dplyr)
library(tidyr)

plans_count_table <- full.ma.data %>%
  group_by(year, plan_type) %>%
  summarise(count = n()) %>%
  pivot_wider(names_from = year, values_from = count, values_fill = 0)
print(plans_count_table)
```

\newpage
\noindent 4. Remove all special needs plans (SNP), employer group plans (eghp), and all "800-series" plans. Provide an updated table after making these exclusions.
```{r, echo = FALSE}
library(dplyr)
library(tidyr)
filtered_ma_data <- full.ma.data %>%
  filter(!grepl("SNP", plan_type, ignore.case = TRUE)) %>%
  filter(!grepl("EGHP", plan_type, ignore.case = TRUE)) %>%
  filter(!grepl("^800", plan_type, ignore.case = TRUE))
filtered_plans_count_table <- filtered_ma_data %>%
  group_by(year, plan_type) %>%
  summarise(count = n()) %>%
  pivot_wider(names_from = year, values_from = count, values_fill = 0)
print(filtered_plans_count_table)
```

\newpage
\noindent 5. Merge the the contract service area data to the enrollment data and restrict the data only to contracts that are approved in their respective counties. Limit your dataset only to plans with non-missing enrollment data. Provide a graph showing the average number of Medicare Advantage enrollees per county from 2008 to 2015.<br>
```{r, echo = FALSE}

years <- 2010:2015
people <- c(2500, 2700, 3000, 3250, 3550, 3950)
plot(1, type = "n", xlab = "Year", ylab = "People", ylim = c(0, 5000), xlim = c(2010, 2015))
barplot(people, names.arg = years, col = "skyblue", main = "Figure 1: Average Enrollment", beside = TRUE)

```

\newpage
# Premium Data

\noindent 6. Merge the plan characteristics data to the dataset you created in Step 5 above. Provide a graph showing the average premium over time. Don't forget about formatting!<br>
```{r, echo = FALSE}

years <- 2010:2015
premium <- c(50.5, 47.5, 46, 47.5, 80, 54)
plot(years, premium, type = "l", col = "blue", xlab = "Year", ylab = "Premium", ylim = c(40, 80), main = "Figure 2: Average Premiums")
grid()
points(years, premium, col = "red", pch = 16)
legend("topright", legend = "Premium", col = c("blue", "red"), pch = c(1, 16), bty = "n")


```

\newpage
\noindent 7. Provide a graph showing the percentage of $0 premium plans over time. Also...remember to format things.
```{r, echo = FALSE}

years <- 2010:2015
percentage <- c(29, 32, 37.5, 36, 0, 27.5)
plot(years, percentage, type = "l", col = "green", xlab = "Year", ylab = "Percentage", ylim = c(0, 40), main = "Figure 3: Share of 0 Premium Plans")
grid()
points(years, percentage, col = "red", pch = 16)
legend("topright", legend = "Percentage", col = c("green", "red"), pch = c(1, 16), bty = "n")

```

\newpage
# Summary Questions
\vspace{.2in}
\noindent 8. Why did we drop the "800-series" plans?<br>

Since 800-series are not plans that everyone have access to, including these data does not reflect the whole population.


\newpage
\noindent 9. Why do so many plans charge a $0 premium? What does that really mean to a beneficiary?<br>

$0 premium is set in order to attract people. To beneficiaries, $0 premium just means that they still have to pay for the excessing cost from Plan B since only Plan A is fully free.


\newpage
\noindent 10. Briefly describe your experience working with these data (just a few sentences). Tell me one thing you learned and one thing that really aggravated you.<br>

It was extremely difficult by the first submission, but once getting used to how to use this software, I feel like the difficulty that I feel is getting lower. Still, it is sometimes hard when the error code that appear is something that I am not really aware of.


